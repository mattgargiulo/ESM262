#run tidyverse
library(tidyverse)
library(knitr)
#First need to upload the | seperated text file, and turn into a tibble
#import
gaz_raw<- read.delim("hw1.txt", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", na.strings = "NA")
#run tidyverse
library(tidyverse)
library(knitr)
#First need to upload the | seperated text file, and turn into a tibble
#import
gaz_raw<- read.delim("hw1.txt", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", na.strings = "NA")
#First need to upload the | seperated text file, and turn into a tibble
#import
gaz_raw<- read.delim("hw1.txt", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", na.strings = "NA")
#run tidyverse
library(tidyverse)
library(knitr)
#First need to upload the | seperated text file, and turn into a tibble
#import
gaz_raw<- read.delim("hw1.txt", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", na.strings = "NA")
#solect the columns i want and rename to match assignment
#column select and rename
colnames(gaz_raw)
#First need to upload the | seperated text file, and turn into a tibble
#import
gaz_raw<- read.delim("hw1.txt", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", na.strings = "NA")
#First need to upload the | seperated text file, and turn into a tibble
#import
gaz_raw<- read.delim("hw1.txt", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", na.strings = "NA")
#First need to upload the | seperated text file, and turn into a tibble
#import
gaz_raw<- read.delim("hw1.txt", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", na.strings = "NA")
#First need to upload the | seperated text file, and turn into a tibble
#import
gaz_raw<- read.delim("hw1.txt", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", na.strings = "NA")
#First need to upload the | seperated text file, and turn into a tibble
#import
gaz_raw<- read.delim("hw1.txt", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", na.strings = "NA")
#run tidyverse
library(tidyverse)
library(knitr)
#First need to upload the | seperated text file, and turn into a tibble
#import
gaz_raw<- read.delim("hw1.txt", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", na.strings = "NA")
#First need to upload the | seperated text file, and turn into a tibble
#import
gaz_raw<- read.delim("hw1.txt", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", na.strings = "NA")
#run tidyverse
library(tidyverse)
library(knitr)
#First need to upload the | seperated text file, and turn into a tibble
#import
gaz_raw<- read.delim("hw1.txt", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", na.strings = "NA")
as_tibble(gaz_raw)
#run tidyverse
library(tidyverse)
library(knitr)
#First need to upload the | seperated text file, and turn into a tibble
#import
gaz_raw<- read.delim("hw1.txt", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", na.strings = "NA")
as_tibble(gaz_raw)
#solect the columns i want and rename to match assignment
#column select and rename
colnames(gaz_raw)
newgaz<-select(gaz_raw, FEATURE_ID: STATE_ALPHA, COUNTY_NAME, ends_with("DEC"), ends_with("M"), starts_with("map"), starts_with("DATE"))
colnames(newgaz)<- c("feature ID", "feature name", "feature class", "state alpha", "county name", "primary latitude(decimal)", "primary longitude(decimal)", "source latitutde(decimal)", "source longitude(decimal)", "elevation in meters", "map name", "date created", "date endited")
#re-write the data types
#tranform data types and get data ready for analysis
gaz_tibble<-as.tibble(newgaz)
write_csv(gaz_tibble, "gaz_tibble.csv")
gaz_tibble<-read_csv("gaz_tibble.csv",
col_types = cols(
"feature ID"= col_double(),
"feature name"= col_character(),
"feature class"=col_character(),
"country name"=col_character(),
"primary latitude(decimal)"=col_double(),
"primary longitude(decimal)"=col_double(),
"source latitutde(decimal)"=col_double(),
"source longitude(decimal)"=col_double(),
"elevation in meters"=col_double(),
"map name"= col_character(),
"date created"=col_date(),
"date endited"=col_date()
)
)
gaz_tibble %>%
drop_na("primary latitude(decimal)","primary longitude(decimal)")
gaz_tibble<-gaz_tibble %>% filter(`state alpha`== "CA")
library(DBI)
library(RSQLite)
library(dplyr)
gaz_tibble<-as.data.frame(gaz_tibble)
conn<- DBI::dbConnect(RSQLite::SQLite(), path= ":memory:")
copy_to(conn, gaz_tibble, "gaz",
temporary = FALSE)
dbGetQuery(conn, "SELECT (`feature name`), COUNT(`feature name`) AS count FROM gaz GROUP BY(`feature name`) ORDER BY count DESC LIMIT 10;")
dbGetQuery(conn, "SELECT (`feature class`), COUNT(`feature class`) AS count FROM gaz GROUP BY(`feature class`) ORDER BY count ASC LIMIT 10;")
coordgaz<- select(gaz_tibble, "county name", "feature class" , "primary latitude(decimal)","primary longitude(decimal)") %>% group_by(`county name`)
coordgaz<-filter(coordgaz, `primary latitude(decimal)` !=0 , `primary longitude(decimal)` !=0)
summarizegaz<-summarise(coordgaz,
maxlat=max(`primary latitude(decimal)`, na.rm=TRUE),
minlat=min(`primary latitude(decimal)`, na.rm=TRUE),
maxlong=max(`primary longitude(decimal)`, na.rm=TRUE),
minlong=min(`primary longitude(decimal)`, na.rm=TRUE))
summarizegaz<-summarizegaz %>%
mutate(centerlat=maxlat+minlat/2,
centerlong=maxlong+minlong/2
)
summarizegaz<-as.data.frame(summarizegaz)
copy_to(conn, summarizegaz, "Q3",
temporary = FALSE)
dbGetQuery(conn, "SELECT `county name`,centerlat As Center_Latitude, centerlong AS Center_Longitude FROM Q3 LIMIT 12;")
dbGetQuery(conn, "SELECT `county name`,
CASE
WHEN `feature class` IN('Airport','Bridge','Building','Canal','Cemetery','Census','Church','Civil','Crossing','Dam','Harbor','Hospital','Locale','Military','Mine','Oilfield','Park','Pillar','Populated Place','Post Office','Reserve','Reservoir','School','Tower','Trail','Tunnel','Well')
THEN 'man_made'
ELSE 'natural'
END AS 'feature class type'
FROM gaz
Limit 10;")
